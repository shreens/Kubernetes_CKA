sudo kubectl get nodes  (display all master and worker nodes)
kubectl get pods -A  (display the pod details)
kubectl get pods -o wide (display the pod details with ip address)
kubectl get pods --all-namespaces (To display all pods with all namespaces)
kubectl get pods --show-labels (To display all pods with labels)
kubectl run demopod --image=nginx  (to create a pod called demopod with nginx image)
kubectl describe pods  (display the details of all pods)
kubectl describe pod demopod (describe the particular pod called demopod)
kubectl delete pod demopod (delete the particular demopod)
kubectl port-forward demopod 5001:80 --address='0.0.0.0'(to access the demopod with 5001 port no extrenally in browser)
kubectl logs demopod (To check the logs of particular pod)
kubectl exec -it demopod sh (To login in to the pod)
kubectl exec -it demopod -c cont1 sh (To login to the particular container in the pod)
exit - to come out of the pod/container.
kubectl run firstpod --image=nginx --namespace=demo-dev --dry-run=client -o yaml/json  > pod.yaml
kubectl get namespaces
kubectl create ns demo-dev
kubectl get pods -n demo-dev (to display all pods with that namespace)
kubectl create deploy anotherpod --image=nginx -n demo-dev (To create pod with particular namespace)
kubectl config set-context --current --namespace=demo-dev
kubectl label pods demopod type=awesome(Assigning label to the pod)
kubectl label pods demopod type- (Unassigning label from the pod)
kubectl get pods -l type=awsome
kubectl get pods -l 'enviroment in (qa,prod)'
kubectl delete pods demopod -l type=awsome
kubectl get pods --selector=app=myapp
kubectl get pods --feild-selector=status.phase=Running
kubectl run demopod --image=nginx --dry-run=client -o yaml (Its just dry run to check syntax errors)
kubectl run demopod --image=nginx -o yaml (Yaml file to create a pod)
vi test.yaml
kubectl apply -f test.yaml
kubectl get svc (display all services)
vi testsvc.yaml
kubectl apply -f testsvc.yaml
kubectl describe svc/my-service 
kubectl port-forward svc/my-service 6000:80 --address='0.0.0.0'

Service Yaml file for NodePort

apiVersion: v1	
kind: Service
metadata:
  name: np-service
spec:
  selector:
      type: awesome
  ports:
    - name: http
      protocol: TCP
      port: 9000               ===============================>(port no to map the internal load balancer generated ip)
      targetPort: 80           ================================>(application port no inside the container)
      nodeport: 300081         =================================>(port no for accessing application in browser)
  type: NodePort
  
  Service yaml file for clusterIP
  
apiVersion: v1	
kind: Service
metadata:
  name: np-service
spec:
  selector:
      type: awesome
  ports:
    - name: http
      protocol: TCP
      port: 9000
      targetPort: 80
      
kubectl run demo1 --image=nginx
kubectl run demo2 --image=nginx
kubectl run demo3 --image=nginx
kubectl label pod demo1 type=awesome
kubectl label pod demo2 type=awesome
kubectl label pod demo3 type=notawesome
kubectl get pods -o wide --show-labels
vi Svcnp.yaml
kubectl apply -f Svcnp.yaml
kubectl get svc -o wide
(browser - vmip:portno ====> accessing application)
kubectl expose pod demo3 --port 7070 --targetport 80 --type=NodePort --dry-run=client -o yaml (Creating service through command line)
kubectl expose pod demo3 --port 7070 --targetport 80 --type=NodePort 

Replicaset yaml file

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: frontend
  labels:
    app: guestbook
    tier: frontend
spec:
  # modify replicas according to your case
  replicas: 3
  selector:
    matchLabels:
      tier: frontend
  template:
    metadata:
      labels:
        tier: frontend
    spec:
      containers:
      - name: nginx
        image: nginx

vi replica.yaml
kubectl apply -f replica.yaml
kubectl get rs 
kubectl get pods -o wide
kubectl scale --replicas=5 rs/frontend
kubectl delete rs frontend

Deployment yaml file

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: guestbook
    tier: frontend
spec:
  # modify replicas according to your case
  replicas: 2
  selector:
    matchLabels:
      tier: demo
  template:
    metadata:
      labels:
        tier: demo
    spec:
      containers:
      - name: httpd
        image: httpd


apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: guestbook    =====================================================>These labels are for deployment frontend
    tier: frontend    =====================================================>
spec:
  # modify replicas according to your case
  replicas: 2
  selector:
    matchLabels:
      tier: demo       ====================================================> These selector labels are for selecting service
  template:
    metadata:
      labels:
        tier: demo    ======================================================> These labels for selecting pods
    spec:
      containers:
      - name: httpd
        image: httpd
        
vi deploy.yaml
kubectl create -f deploy.yaml
kubectl apply -f deploy.yaml
kubectl get deployments -o wide
kubectl get pods -o wide
kubectl scale deployment/frontend --replicas=3
kubectl rollout history deployment/frontend
kubectl rollout undo deployment/frontend --to-revision=4 (To rollback to the previous version)
kubectl set image deployment frontend(deployment name) httpd(container name)=nginx:latest (To set new image to the deployment subapp)

Deployment Yaml file

apiVersion: apps/v1
kind: Deployment
metadata:
  name: subapp
  labels:
    app: guestbook
    tier: frontend
spec:
  # modify replicas according to your case
  replicas: 2
  selector:
    matchLabels:
      tier: demo
  template:
    metadata:
      labels:
        tier: demo
    spec:
      containers:
      - name: httpd
        image: httpd
---
apiVersion: v1	
kind: Service
metadata:
  name: np-service
spec:
  selector:
      tier: demo
  ports:
    - name: http
      protocol: TCP
      port: 9000
      targetPort: 80
  type: NodePort
 ---
 =====================================================================================================================================================================
 Example 2 ::
 
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mongo
  name: mongo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - image: mongo:5.0.15
        name: mongo
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: adminuser
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: password123
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mongo
  name: mongo-nodeport-svc
spec:
  ports:
  - port: 27017
    protocol: TCP
    targetPort: 27017
    nodePort: 32000
  selector:
    app: mongo
  type: NodePort
 ---
=====================================================================================================================================================================
example 3 :::

apiVersion: apps/v1
kind: Deployment
metadata:
  name: subappdeployment
  labels:
    app: subapp
    tier: frontend
spec:
  # modify replicas according to your case
  replicas: 2
  selector:
    matchLabels:
      tier: subapp
  template:
    metadata:
      labels:
        tier: subapp
    spec:
      containers:
      - name: subapp
        image: jitenreddy/expmon
        env:
        - name: MONGO_USERNAME
          value: "adminuser"
        - name: MONGO_PASSWORD
          value: "password123"
        - name: MONGO_CLUSTER_URL
          value: "10.102.99.204"          =================>(mongo db service clusterIP)
        - name: MONGO_PORT
          value: "27017"
        - name: DB_NAME
          value: "Subscribers"
        - name: COLLECTION_NAME
          value: "subs"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: sub-app-svc
  name: sub-app-svc
spec:
  ports:
  - port: 5000
    protocol: TCP
    targetPort: 4000
  selector:
    tier: subapp
  type: NodePort
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: mongo
  name: mongo-nodeport-svc
spec:
  ports:
  - port: 27017
    protocol: TCP
    targetPort: 27017
    nodePort: 32000
  selector:
    app: mongo
---
=======================================================================================================================================================================
Example 4 :: whenever the mongodb service get killed and restarted clusterIP gets changed so we cant keep on updating everytime instead we use DNS name.

To convert IP into DNS name we need "busybox" image.


kubectl apply -f https://k8s.io/examples/admin/dns/busybox.yaml
kubectl exec -ti busybox -- nslookup mongo-nodeport-svc (Gives the service mongo-nodeport-svc clusterIP and DNS name)
kubectl exec -ti busybox -- nslookup mongo-nodeport-svc
           or 
kubectl apply -f busybox.yaml 
vi busybox.yaml

#create a pod with busybox image to convert IP to DNS 
apiVersion: v1
kind: Pod
metadata:
  name: busybox
  namespace: default
spec:
  containers:
  - name: busybox
    image: busybox:1.28
    command:
      - sleep
      - "3600"
    imagePullPolicy: IfNotPresent
  restartPolicy: Always
---

===================================================================================================================================================================


         

 
