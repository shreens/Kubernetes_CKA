control plane
vi ~/.kube/config ========>file

Certificates :: If we have to give user a access for kubernetes cluster for accessing cluster from outside(from local laptop) by generating the certificates.
Service Accounts :: If one system/one application has to communicate with other system/other application we have create service accounts by generating tokens.
Role :: If we have to give user a access to the particular namespace then we use role.
Cluster Role :: If we have to give user a access to cluster wide i.e, across for all namespace within the cluster then we will use ClusterRole.
Resources :: We have specify resources access for Role and ClusterRole (PODS,DEPLYOMENTS,SECRETS etc).
Verb :: specifying what access does the user have to work in cluster (get, list, delete, etc).
Role Binding :: Its binding between User and Role/ClusterRole.

CERTIFICATES::
openssl genrsa -out jiten.key 2048      ===============>Creating a key called jiten #cat jiten.key
openssl req -new -key jiten.key -out jiten.csr -subj "/CN=jiten"  =====================>Certificate Request
sudo openssl x509 -req -in jiten.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out jiten.crt -days 500 ======>sign up cert

ls jiten.*
vi jiten.csr
vi jiten.crt   ===========> valid for 500 days.

vi .kube/config  ======>to check the users and context

Creating User credentials  jiten in kubernetes cluster and switching to the particular context ::

kubectl config set-credentials jiten --client-certificate=jiten.crt --client-key=jiten.key
kubectl config set-context someuser-context --cluster=kubernetes --user=jiten
kubectl config use-context someuser-context

Assigning Role :
kubectl config get-contexts
kubectl config use-context kubernetes-admin@kubernetes
kubectl create role developer --verb=create --verb=get --verb=list --verb=update --verb=delete --resource=pods
kubectl create rolebinding developer-binding-demo --role=developer --user=jiten

https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/#kubeconfig-additional-users


kubectl get pods --insecure-skip-tls-verify=true
